

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddPolicyForm.java
 *
 * Created on Jul 29, 2009, 2:00:39 PM
 */

/**
 *
 * @author Bryan
 */

import javax.swing.*;
import java.util.*;

public class AddPolicyForm extends javax.swing.JFrame {

    private DBHandler db;
    private JComboBox teacherSelector;
    private JTextField programsList;
    private JTextField sitesList;
    private JRadioButton sitesWhitelist;
    private Vector<Policy> policies;
    private Interface inter;
    /** Creates new form AddPolicyForm */
    public AddPolicyForm(Interface inter, DBHandler db, Vector<Policy> policies, JComboBox teacherSelector, JTextField programsList, JTextField sitesList, JRadioButton sitesWhitelist) {
        initComponents();
        this.inter = inter;
        this.db = db;
        this.teacherSelector = teacherSelector;
        this.programsList = programsList;
        this.sitesList = sitesList;
        this.sitesWhitelist = sitesWhitelist;
        this.policies = policies;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        policyNameField = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();

        jLabel1.setText("Policy Name");

        jToggleButton1.setText("Save Policy");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jToggleButton1)))
                .addContainerGap(161, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(policyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(policyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        //validate that a teacher was selected
        if(((String)(teacherSelector.getSelectedItem())).trim().equals(""))
        {
            //tell the error and return
            JOptionPane.showMessageDialog(this, "A Teacher Must Be Selected");
            return;
        }

        //validate the policy name
        if(policyNameField.getText().trim().equals(""))
        {
            //tell the error and return
            JOptionPane.showMessageDialog(this, "The Policy Must Have a Name");
            return;
        }
        if(policyNameField.getText().trim().length() > 255)
        {
            //tell the error and return
            JOptionPane.showMessageDialog(this, "The Policy Name Must Be Less than 255 Characters");
            return;
        }
        //make sure the policy name doesn't already exist
        Iterator itr = policies.iterator();
        while(itr.hasNext())
        {
            Policy currPolicy = (Policy)(itr.next());
            if(currPolicy.getPolicyName().trim().equals(policyNameField.getText().trim()))
            {
                JOptionPane.showMessageDialog(this, "The Policy Name Must Be Unique!");
                return;
            }
        }

        if(sitesList.getText().trim().equals("") && programsList.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Both the sites list and the programs list are blank!");
            return;
        }

        //if nothing above fails, let's write it to the db
        db.addPolicy(policyNameField.getText(), (String)teacherSelector.getSelectedItem(), programsList.getText(), sitesList.getText(), sitesWhitelist.isSelected());
        
        //now refresh the interface to have the appropriate polcies
        inter.resetPolicies();

        this.setVisible(false);
    }//GEN-LAST:event_jToggleButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField policyNameField;
    // End of variables declaration//GEN-END:variables

}
